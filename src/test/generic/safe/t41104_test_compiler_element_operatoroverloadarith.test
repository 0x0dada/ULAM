## -*- mode:ulam -*-
#=t41104_test_compiler_element_operatoroverloadarith
##
## gen output: (+ assert)
##   Int Arg: 5
##
#!
Exit status: 5
Ue_Foo { Bool(1) first(false);  Int(32) fint(0);  Int(32) opfint(5);  Int(32) test() {  System s;  Foo foo;  foo fint . 2 cast = opfint foo ( 3 cast )operator2b . = s ( opfint )print . s ( opfint 5 cast == )assert . opfint return } }
Uq_System { <NOMAIN> }
##
## first test to parse operator+ for an element
##
#>Foo.ulam
  ulam 2;
element Foo {
  Bool first;
  Int fint, opfint;
  Int test() {
    System s;
    Foo foo;
    foo.fint = 2;
    //opfint = foo + 3;
    opfint = foo.operator+(3);
    s.print(opfint);
    s.assert(opfint == 5);

    return opfint;
  }

  Int operator+(Int iarg)
  {
    return fint + iarg;
  }

}

#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}

#.
