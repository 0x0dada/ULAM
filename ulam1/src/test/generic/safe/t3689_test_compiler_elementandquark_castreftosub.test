## -*- mode:ulam -*-
#=t3689_test_compiler_elementandquark_castreftosub
#!
##      gen code output: (4 asserts)
##
Exit status: -11
Ue_A : QW { :< :< Unary(5) m_five(5u); > Bool(1) bw(false); > Bool(1) b(false);  Bool(1) c(true);  Int(32) test() {  System s;  Qbase& qref = self cast;  m_five 5 cast = c qref m_five . cast 5 == = s ( c )assert . A apple2;  c apple2 m_five . cast 5 != = s ( c )assert . apple2 qref cast = c apple2 m_five . cast 5 == = s ( c )assert . qref m_five . 3 cast = A apple = qref cast;  b apple m_five . cast 3 cast == = s ( b )assert . b cast return } }
Uq_System { <NOMAIN> }
Uq_QW : Qbase { :< Unary(5) m_five(0); > Bool(1) bw(false);  <NOMAIN> }
Uq_Qbase { Unary(5) m_five(0);  <NOMAIN> }
##
## Dave requested a way to get default values for Self (within a quark);
## a loophole, since a quark would be an undefined atom, but as a ref, its done (t3679)
##
#>A.ulam
  ulam 2;
use System;
use QW;
element A : QW {
  Bool b, c;
  Int test(){
    System s;
    Qbase& qref = self;
    m_five = 0x5;
    c = (qref.m_five == 0x5);
    s.assert(c);
    A apple2;
    c = (apple2.m_five != 0x5);
    s.assert(c);
    //apple2 = (A) qref; //assignment: unused var (qref read)
    apple2 = qref; //assignment: unused var (qref read)
    c = (apple2.m_five == 0x5);
    s.assert(c);

    qref.m_five = 0x3;
    //A apple = (A) qref; //init: unused var (qref read)
    A apple = qref; //init: unused var (qref read)
    b = (apple.m_five == 0x3);
    s.assert(b);

    return (Int) b;
  }
}

#:QW.ulam
  ulam 2;
use Qbase;
quark QW : Qbase{
  Bool bw;
  Self func()
  {
    Atom a = self.atomof;
    //Self& sra = (Self&) a; //new way!
    Self sra = (Self) a; //immediate quark with current values
    return sra;
  }
}

#:Qbase.ulam
  ulam 2;
quark Qbase{
  Unary(5) m_five;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
