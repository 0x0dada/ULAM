## -*- mode:ulam -*-
#=t3756_test_compiler_elementandquark_assignreftosub_toint_issue
#!
Exit status: -11
Ue_A : QW { :< :< Unary(5) m_five(0u); > Bool(1) bw(false); > Bool(1) b(false);  Bool(1) c(false);  Int(32) test() {  System s;  Qbase& qref = self cast;  A apple = qref cast;  A apple2;  apple2 qref cast = A apple3 = qref.atomof cast;  A& appleref = qref cast;  Atom(96)& atr = qref.atomof;  Atom(96) a = qref.atomof cast;  0 cast return } }
Uq_System { <NOMAIN> }
Uq_QW : Qbase { :< Unary(5) m_five(0); > Bool(1) bw(false);  <NOMAIN> }
Uq_Qbase { Unary(5) m_five(0);  <NOMAIN> }
##
## Dave requested a way to get default values for Self (within a quark);
## a loophole, since a quark would be an undefined atom, but as a ref, its done (t3679)
##
## informed by t3689: bug fixed that required a cast because toInt existed (apple = qref)
##
#>A.ulam
  ulam 2;
use System;
use QW;
element A : QW {
  Bool b, c;
  Int test(){
    System s;
    Qbase& qref = self;

    A apple = qref; //unused var (qref read)

    A apple2;
    apple2 = qref; //unused var (qref read)

    A apple3 = (A) qref.atomof;

    A& appleref = qref; //unused var (qref read); can't use .atomof

    Atom & atr = qref.atomof;

    Atom a = qref.atomof;
    return 0;
  }
}

#:QW.ulam
  ulam 2;
use Qbase;
quark QW : Qbase{
  Bool bw;
  Self func()
  {
    Atom a = self.atomof;
    Self sra = (Self) a; //immediate quark with current values
    return sra;
  }
}

#:Qbase.ulam
  ulam 2;
quark Qbase{
  Unary(5) m_five;
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
