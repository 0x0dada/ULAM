## -*- mode:ulam -*-
#=t3408_test_compiler_quarkwithselfcast_issue
#!
##      /* gen code output:
##         Int(3) Arg: 0x0
##        Int(4) Arg: 0x0
##        Int(3) Arg: 0x0
##        Int(4) Arg: 0x0
##        Int(3) Arg: 0x1
##        Int(4) Arg: 0x2
##        Int(3) Arg: 0x1
##        Int(4) Arg: 0x2
##        Int(3) Arg: 0x2
##        Int(4) Arg: 0x3
##        Int(3) Arg: 0x2
##        Int(4) Arg: 0x2
##      */
##      //eval self doesn't reflect correctly (see gen output): is an atom for quark's function call hidden arg
##
Exit status: 0
Ue_Foo : IntXY(3u,4u) { :< constant Unsigned(32) xbits = 3u;  constant Unsigned(32) ybits = 4u;  typedef Int(3) XCoord;  typedef Int(4) YCoord;  Int(3) x(2);  Int(4) y(2); > Int(32) test() {  System s;  Foo m;  s ( x )print . s ( y )print . s ( m x . )print . s ( m y . )print . m ( 1 cast 2 cast )make = s ( m x . )print . s ( m y . )print . m ( 1 cast 2 cast )makeAs = s ( m x . )print . s ( m y . )print . m ( 2 cast 3 cast )fromXY cast = s ( m x . )print . s ( m y . )print . ( 2 cast 2 cast )init s ( self x . )print . s ( self y . )print . 0 cast return } }
Uq_IntXY(Unsigned(32) xbits, Unsigned(32) ybits) { typedef Int(UNKNOWN) XCoord;  typedef Int(UNKNOWN) YCoord;  Int(3) x(notready);  Int(4) y(notready);  <NOMAIN> }
Uq_System { <NOMAIN> }
#>Foo.ulam
  ulam 1;
use IntXY;
use System;
element Foo : IntXY(3u,4u){
  Int test() {
    System s;
    Foo m;
    s.print(x);
    s.print(y);

    s.print(m.x);
    s.print(m.y);

    m = make(1,2); //works!!
    s.print(m.x);
    s.print(m.y);

    m = makeAs(1,2);
    //m.init(1,2); //works
    s.print(m.x);
    s.print(m.y);

    m = (Foo) fromXY(2,3);
    s.print(m.x);
    s.print(m.y);

    init(2,2);
    s.print(self.x);
    s.print(self.y);

    return 0;
  }

  Self makeAs(Int x, Int y) {
    Atom a = self;
    if(a as Self){
      a.init(x,y);
    }
    if(a is Self)
    {
      self = (Self) a;
      return self;
    }
    return (Self) a;
  }

  Self make(Int x, Int y) {
    Self ret;
    ret.init(x,y);
    return ret;
   }

}

#:IntXY.ulam
  ulam 1;
quark IntXY(Unsigned xbits, Unsigned ybits) {
  typedef IntXY(xbits, ybits) Self;
  typedef Int(xbits) XCoord;
  typedef Int(ybits) YCoord;
  XCoord x;
  YCoord y;
  Atom fromXY(Int x, Int y) {
    init(x,y);
    return atom; //self;
  }

  Void init(Int ax, Int ay) {
    x = (XCoord) ax;
    y = (YCoord) ay;
    if(x == x.minof) ++x;
    if(y == y.minof) ++y;
  }
}
#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
