## -*- mode:ulam -*-
#=t3684_test_compiler_elementandquark_elementstorageoffunccallarg
#!
##      gen code output: (2 asserts)
##
##        unevaluable without assuming atoms as elements (c should be false)
##
./A.ulam:8:9: ERROR: Invalid argument 1 to function <func>; Cannot be used as a reference parameter.
./A.ulam:4:9: ERROR: 1 Nodes with erroneous types detected after type labeling class: A.
./A.ulam:4:9: ERROR: 1 Nodes with unresolved types detected after type labeling class: A.
Unrecoverable Program Type Label FAILURE.
##Exit status: 0
##Ue_A : QW { :<> Bool(1) b(true);  Bool(1) c(true);  Int(32) test() {  System s;  b ( self.storageof )func = s ##( b )assert . Atom(96) a;  c ( a cast )func = s ( c ! )assert . 0 cast return } }
##Uq_System { <NOMAIN> }
##Uq_QW { <NOMAIN> }
##
## Dave requested a way to get default values for Self (within a quark);
## a loophole, since a quark would be an undefined atom, but as a ref, its done (t3679)
##
#>A.ulam
  ulam 2;
use System;
use QW;
element A : QW {
  Bool b, c;
  Int test(){
    System s;
    b = func(self.storageof);
    s.assert(b);
    Atom a;
    c = func(a);
    s.assert(!c);
    return 0;
  }
}

#:QW.ulam
  ulam 2;
quark QW {
  Bool func(Atom& aarg)
  {
    return (aarg is Self);
  }
}

#:System.ulam
ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
