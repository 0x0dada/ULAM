## -*- mode:ulam -*-
#=t3189_test_compiler_elementandquark_memberselectedfunc_error
#!
./Foo.ulam:11:20: ERROR: Member selected must be a valid lefthand side: func requires a variable; may be a casted function call.
./Foo.ulam:5:2: ERROR: Unresolved No.1.
./Foo.ulam:6:2: ERROR: Unresolved No.2.
./Foo.ulam:6:2: ERROR: Unresolved No.3.
./Foo.ulam:7:4: ERROR: Unresolved No.4.
./Foo.ulam:7:2: ERROR: Unresolved No.5.
./Foo.ulam:7:4: ERROR: Unresolved No.6.
./Foo.ulam:7:9: ERROR: Unresolved No.7.
./Foo.ulam:7:11: ERROR: Unresolved No.8.
./Foo.ulam:7:4: ERROR: Unresolved No.9.
./Foo.ulam:8:2: ERROR: Unresolved No.10.
./Foo.ulam:8:9: ERROR: Unresolved No.11.
./Foo.ulam:5:2: ERROR: Unresolved No.12.
./Foo.ulam:5:2: Warning: 12 nodes with unresolved types remain in function <func> (Uf_4func,2,2).
./Foo.ulam:5:6: Warning: Summary: 12 nodes with unresolved types remain in  a single function <func> in class: Foo.
./Foo.ulam:11:8: ERROR: Unresolved No.1.
./Foo.ulam:11:20: ERROR: Unresolved No.2.
./Foo.ulam:11:20: ERROR: Unresolved No.3.
./Foo.ulam:11:20: ERROR: Unresolved No.4.
./Foo.ulam:10:2: Warning: 4 nodes with unresolved types remain in function <test> (Uf_4test,1).
./Foo.ulam:10:6: Warning: Summary: 4 nodes with unresolved types remain in  a single function <test> in class: Foo.
./Foo.ulam:3:10: Warning: 16 data member nodes with unresolved types remain in class 'Foo'.
./Foo.ulam:3:10: ERROR: 16 Nodes with unresolved types detected after type labeling class: Foo.
Unrecoverable Program Type Label FAILURE.
##
##      //member selection with a function call must be first saved to a
##      //variable since we results are returned-by-value (see t3188)
##
#>Foo.ulam
ulam 1;
 use C2D;
 element Foo {
 Int m_idx;
 C2D func(Int i, Int j) {
 C2D c;
 c.init(i,j);
 return c;
 }
 Int test() {
 m_idx = func(9,4).getIndex(0,0);
  return m_idx;
 }
 }

#:C2D.ulam
quark C2D {
 typedef Int(4) IF;
 IF m_width, m_height;
  Void init(Int x, Int y) {
 m_width = (IF) x;
 m_height = (IF) y;
 return;
 }
 Void init() {
 m_width = IF.maxof;
 m_height = 4;
 return;
 /* event window overload */ }
 Int getIndex(Int a, Int b){
 return ((m_height-b) * m_width + (m_height-a));
 }
 }
#.
