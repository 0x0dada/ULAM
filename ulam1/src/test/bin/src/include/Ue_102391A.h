/**                                      -*- mode:C++ -*- */

/***********************         DO NOT EDIT        ******************************
*
* A.h - Element header for ULAM
*
**********************************************************************************
* This code is generated by the ULAM programming language compilation system.
*
* The ULAM programming language compilation system is free software:
* you can redistribute it and/or modify it under the terms of the GNU
* General Public License as published by the Free Software
* Foundation, either version 3 of the License, or (at your option)
* any later version.
*
* The ULAM programming language compilation system is distributed in
* the hope that it will be useful, but WITHOUT ANY WARRANTY; without
* even the implied warranty of MERCHANTABILITY or FITNESS FOR A
* PARTICULAR PURPOSE.  See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License
* along with the ULAM programming language compilation system
* software.  If not, see <http://www.gnu.org/licenses/>.
*
* @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>
*/

#ifndef UE_102391A_H
#define UE_102391A_H

#include "UlamDefs.h"

#include "Ue_102391A_Types.h"

namespace MFM { template <class CC, u32 POS> struct Uq_10106System; }  //FORWARD

namespace MFM{

  template<class CC>
  class Ue_102391A : public UlamElement<CC>
  {
    // Extract short names for parameter types
    typedef typename CC::ATOM_TYPE T;
    typedef typename CC::PARAM_CONFIG P;

    enum { BPA = P::BITS_PER_ATOM };
    typedef BitVector<BPA> BV;


  public:

    static Ue_102391A THE_INSTANCE;

    //! A.ulam:3: System s;
    typedef Uq_10106System<CC, 25> Ut_Um_1s;

    //! A.ulam:4: Bool(7) b;
    typedef AtomicParameterType<CC, VD::BOOL, 7, 25> Up_Um_1b;

    //! A.ulam:5: Int d;
    typedef AtomicParameterType<CC, VD::S32, 32, 32> Up_Um_1d;

    Ue_102391A();
    ~Ue_102391A();


    //! A.ulam:6: Int test(){Int e, a = 8, f = 7;
    Ui_Ut_102323Int Uf_4test(T& Uv_4self) const;

    //helper method not called directly
    s32 PositionOfDataMemberType(const char * namearg) const;

    //helper method not called directly
    bool internalCMethodImplementingIs(const T& targ) const;

  };

  template<class CC>
  Ue_102391A<CC> Ue_102391A<CC>::THE_INSTANCE;

} //MFM

#include "Ue_102391A.tcc"

#endif //UE_102391A_H
