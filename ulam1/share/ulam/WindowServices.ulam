ulam 1;

use Empty;
use EventWindow;
use MDist;
use Random;
use System;
use AtomUtils;
use Fail;

element WindowServices {
  // Utilities
  MDist mdist;
  Random random;
  System system;
  EventWindow ew;
  Fail fail;

  // Types
  typedef Unsigned(3) Radius;

  typedef Unsigned(6) Index;
  typedef Index IndexArray[4];

  typedef Unsigned(8) Count;
  typedef Count CountArray[4];

  typedef Unsigned(2) Slot;

  // Data members
  Radius firstRadius;
  Radius lastRadius;
  Index currentIndex;
  CountArray hitCount;
  IndexArray chosenIndex;

  // Methods
  Void init() {
    reset(0, 4);
  }

  Void reset(Int first, Int last) {
    reset((Radius) first, (Radius) last);
  }

  Void reset(Radius first, Radius last) {
    firstRadius = first;
    lastRadius = last;
    reset();
  }

  Void reset() {
    for (Int i = 0; i < 4; i += 1) {
      hitCount[i] = 0;
      chosenIndex[i] = 0;
    }
    currentIndex = (1<<6)-1;  // Unsigned(6).MAX_VAL
  }

  Bool scan(Int t0) { return scan(t0, -1, -1, -1); }
  Bool scan(Int t0, Int t1) { return scan(t0, t1, -1, -1); }
  Bool scan(Int t0, Int t1, Int t2) { return scan(t0, t1, t2, -1); }

  /**
     Scan the event window from the firstRadius (by default 0) through
     the lastRadius (by default, 4), looking for instances of up to
     four types, t1, t2, t3, t4.

     The following special cases apply:
      - If a type is equal to -1, then no sites sites will be considered hits
      - if a type is equal to -2, then all empty sites will be considered hits
      - if a type is equal to -3, then all non-empty sites will be considered hits.
      - if a type is equal to -4, then all sites will be considered hits.

     All other negative type values are reserved and will cause
     failure if used.

     Use reset(int,int) to specify the firstRadius and
     lastRadius. Return true if any matches were found.
   */
  Bool scan(Int t0, Int t1, Int t2, Int t3) {

    if (t0 < -4 || t1 < -4 || t2 < -4 || t3 < -4)
      fail.fail();

    AtomUtils tu;
    Int et = tu.getEmptyType();
    reset();
    for (Int slot = next(); slot >= 0; slot = next()) {
      Atom a = ew[slot];
      Int at = tu.getType(a);
      if (at < 0) continue;
      if ((t0 == -4) || (t0 == -2 && at == et) || (t0 == -3 && at != et) || (at == t0)) hit(0);
      if ((t1 == -4) || (t1 == -2 && at == et) || (t1 == -3 && at != et) || (at == t1)) hit(1);
      if ((t2 == -4) || (t2 == -2 && at == et) || (t2 == -3 && at != et) || (at == t2)) hit(2);
      if ((t3 == -4) || (t3 == -2 && at == et) || (t3 == -3 && at != et) || (at == t3)) hit(3);
    }
    return (getHits(0) + getHits(1) + getHits(2) + getHits(3)) > 0;
  }

  Int next() {
    Index end = mdist.getLastIndex(lastRadius);

    if (currentIndex == (1<<6)-1)  // Unsigned(6).MAX_VAL
      currentIndex = mdist.getFirstIndex(firstRadius);
    else if (currentIndex <= end)
      currentIndex += 1;

    if (currentIndex > end) return -1;

    return currentIndex;
  }

  Bool hit() { return hit((Slot) 0, (Unsigned) 1); }

  Bool hit(Slot slot) { return hit(slot, (Unsigned) 1); }
  Bool hit(Int slot) { return hit((Slot) slot, (Unsigned) 1); }

  Bool hit(Slot slot, Unsigned weight) {
    hitCount[slot] = hitCount[slot] + weight;
    if (random.create((Unsigned) hitCount[slot]) < weight) {
      chosenIndex[slot] = currentIndex;
      return true;
    }
    return false;
  }

  Count getHits() {
    return getHits((Slot) 0);
  }

  Count getHits(Slot slot) { return hitCount[slot]; }
  Count getHits(Int slot) { return getHits((Slot) slot); }

  Index getPick() {
    return getPick((Slot) 0);
  }

  Index getPick(Slot slot) {
    if (getHits(slot) == 0)
      return (1<<6)-1;  // Unsigned(6).MAX_VAL
    return chosenIndex[slot];
  }
  Index getPick(Int slot) { return getPick((Slot) slot); }

  Int test() {
    Int count = 0;
    Int n0 = 0;

    init();

    for (Int index = next(); index >= 0; index = next()) {
      count += 1;
    }

    if (count != 41) return 1;

    count = 0;
    init();
    for (Int index2 = next(); index2 >= 0; index2 = next()) {
      for (Int idx = 0; idx < 4; idx += 1) {
        system.print(-1);
        system.print(count);
        system.print(index2);
        system.print(idx);
        n0 = (count&(1<<idx));
        system.print((Unsigned) (count&(1<<idx)));
        if (count&(1<<idx)) hit((Slot) idx);
      }
      count += 1;
    }
    system.print(-2);

    n0 = getHits((Slot) 0);                // This works
    system.print(n0);

    n0 = getHits((Slot) 1);
    system.print(n0);

    n0 = getHits((Slot) 2);
    system.print(n0);

    n0 = getHits((Slot) 3);
    system.print(n0);

    return 0;
  }
}
