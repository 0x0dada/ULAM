ulam 1;

quark ColorUtils {
  typedef Unsigned(8) Channel;
  typedef Channel ARGB[4];
  ARGB color(Unsigned hex) {
    ARGB ret;
    ret[0] = (hex >> 24) & 0xff;
    ret[1] = (hex >> 16) & 0xff;
    ret[2] = (hex >>  8) & 0xff;
    ret[3] = (hex >>  0) & 0xff;
    return ret;
  }
  ARGB color(Channel red, Channel green, Channel blue) {
    ARGB ret;
    ret[0] = 0xff;
    ret[1] = red & 0xff;
    ret[2] = green & 0xff;
    ret[3] = blue & 0xff;
    return ret;
  }

  ARGB modify(ARGB this, Unsigned percent) {
    Unsigned rest = (Unsigned) 100 - percent;
    for (Int i = 1; i < 4; ++i) {
      Unsigned old = this[i];
      Unsigned new = (old * rest + (Unsigned) 0xff * percent) / 100;
      this[i] = new;
    }
    return this;
  }


  /** Return a brighter version of a color.  Sort of like the Java
    brighten() method does it. The comment on their code says:

     From 2D group:
      1. black.brighter() should return grey
      2. applying brighter to blue will always return blue, brighter
      3. non pure color (non zero rgb) will eventually return white
  */
  ARGB brighter(ARGB than) {
    than[0] = 0xff;
    if (than[1] == 0 && than[2] == 0 && than[3] == 0)
      return color((Unsigned) 0x030303);
    for (Int i = 1; i < 4; ++i) {
      if (than[i] > 0 && than[i] < 3) than[i] = 3;
      than[i] = 100*than[i]/70;
    }
    return than;
  }

  /** Return a dimmer version of a color.  Sort of like the Java
    dimmer() method does it.
  */
  ARGB dimmer(ARGB than) {
    than[0] = 0xff;
    for (Int i = 1; i < 4; ++i)
      than[i] = 70*than[i]/100;
    return than;
  }
}
