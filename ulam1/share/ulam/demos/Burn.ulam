ulam 1;
use EventWindow;
use WindowServices;
use Empty;
use ColorUtils;
use Random;
use XTimer;
use Trigger;

/**
   'Burnable' active media demo.  Render a bunch of these guys with
   Atom #1 and then create a Spark atom (below) next to them, while
   the grid is running.  Try various Burn shapes and arrangements.
   Can you make a fire that never goes out?

   \symbol Bu
   \symmetries normal
   \color #e44
   \author Dave Ackley
   \license public domain
 */
element Burn {
  EventWindow ew;
  Random random;

  typedef ColorUtils.ARGB ARGB;
  typedef ColorUtils.Channel Channel;
  typedef Unsigned(4) Counter;

  Counter state;
  Trigger trigger;

  Void behave() {

    // Am I recovering?
    if (state < state.maxof) {
      ++state;   // Yes
      return;
    }

    // I am recovered..
    trigger.doArm();

    // If no spark from me or someone near me..
    if (!trigger.isPulled()) return;  // I'm done

    // Fire fire fire!  Try to pull every nearby trigger!
    WindowServices ws;
    ws.reset(1,2);
    for (Int slot = ws.next(); slot >= 0; slot = ws.next()) {
      Atom other = ew[(Unsigned) slot];
      if (other as Trigger) {
        other.doPull();
      }
      ew[(Unsigned) slot] = other;
    }

    // Our work is done.  We're tired.
    trigger.doSafe();
    state = state.minof;
  }

  ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    ARGB ret = cu.color(0xffffff00U);
    if (selector == 1u) {
      Unsigned incr = Unsigned(8).maxof/(Unsigned) state.maxof;
      ret[3] = (Channel) incr*state;
      ret[2] = (Channel) incr*(state.maxof-state);
    } else if (selector == 2u) {
    }
    return ret;
  }

}


/**
   An Burn atom trigger.  A Spark only survives for one event, during
   which it decays into a Burn atom in the state of firing.

   \symbol Sp
   \color #00f
 */
element Spark {
  EventWindow ew;
  Void behave() {
    Burn atom;
    atom.state = atom.state.maxof;
    atom.trigger.doSafe();
    atom.trigger.doArm();
    atom.trigger.doPull();
    ew[0] = (Atom) atom;
  }
}
