ulam 1;

use MDist;
use Random;
use System;

element WindowUtils {
  // Services
  MDist mdist;
  Random random;
  System system;

  // Types
  typedef Unsigned(3) Radius;

  typedef Unsigned(6) Index;
  typedef Index IndexArray[4];

  typedef Unsigned(8) Count;
  typedef Count CountArray[4];

  typedef Unsigned(2) Slot;

  // Data members
  Radius firstRadius;
  Radius lastRadius;
  Index currentIndex;
  CountArray hitCount;
  IndexArray chosenIndex;

  // Methods
  Void init() {
    reset(0, 4);
  }

  Void reset(Int first, Int last) {
    reset((Radius) first, (Radius) last);
  }

  Void reset(Radius first, Radius last) {
    firstRadius = first;
    lastRadius = last;
    reset();
  }

  Void reset() {
    Int i = 0;
    while (i < 4) {
      hitCount[i] = 0;
      chosenIndex[i] = 0;
      i += 1;
    }
    currentIndex = (1<<6)-1;  // Unsigned(6).MAX_VAL
  }

  Int next() {
    Index end = mdist.getLastIndex(lastRadius);

    if (currentIndex == (1<<6)-1)  // Unsigned(6).MAX_VAL
      currentIndex = mdist.getFirstIndex(firstRadius);
    else if (currentIndex <= end)
      currentIndex += 1;

    if (currentIndex > end) return -1;

    return currentIndex;
  }

  Bool hit() { return hit((Slot) 0, (Unsigned) 1); }

  Bool hit(Slot slot) { return hit(slot, (Unsigned) 1); }
  Bool hit(Int slot) { return hit((Slot) slot, (Unsigned) 1); }

  Bool hit(Slot slot, Unsigned weight) {
    hitCount[slot] = hitCount[slot] + weight;
    if (random.create((Unsigned) hitCount[slot]) < weight) {
      chosenIndex[slot] = currentIndex;
      return true;
    }
    return false;
  }

  Count getHits() {
    return getHits((Slot) 0);
  }

  Count getHits(Slot slot) { return hitCount[slot]; }
  Count getHits(Int slot) { return getHits((Slot) slot); }

  Index getPick() {
    return getPick((Slot) 0);
  }

  Index getPick(Slot slot) {
    if (getHits(slot) == 0)
      return (1<<6)-1;  // Unsigned(6).MAX_VAL
    return chosenIndex[slot];
  }
  Index getPick(Int slot) { return getPick((Slot) slot); }

  Int test() {
    Int count = 0;
    Int index;
    Int n0 = 0;

    init();
    while ((index = next()) >= 0) {
      count += 1;
    }

    if (count != 41) return 1;

    count = 0;
    init();
    while ((index = next()) >= 0) {
      Int idx = 0;
      while (idx < 4) {
        system.print(-1);
        system.print(count);
        system.print(index);
        system.print(idx);
        n0 = (count&(1<<idx));
        system.print((Unsigned) (count&(1<<idx)));
        if (count&(1<<idx)) hit((Slot) idx);
        idx += 1;
      }
      count += 1;
    }
    system.print(-2);

    n0 = getHits((Slot) 0);                // This works
    system.print(n0);

    n0 = getHits((Slot) 1);
    system.print(n0);

    n0 = getHits((Slot) 2);
    system.print(n0);

    n0 = getHits((Slot) 3);
    system.print(n0);

    return 0;
  }
}
